import math
# msg = [1.878085970878601, 1.9213001728057861, 2.308811664581299, 2.0866615772247314, 2.0781829357147217, 2.112226724624634, 2.111365556716919, 2.174804449081421, 2.2325470447540283, 2.832817316055298, 3.519946813583374, 2.280186176300049, 2.0175163745880127, 1.5049068927764893, 1.4414950609207153, 1.38531494140625, 2.664451837539673, 2.593287467956543, 2.545321226119995, 2.473017454147339, 2.412562370300293, 1.6953842639923096, 1.598737120628357, 2.2695202827453613, 2.2256414890289307, 2.266249895095825, 1.2597044706344604, 1.1807091236114502, 1.1284425258636475, 2.1923625469207764, 1.9824119806289673, 2.289879322052002, 2.239431619644165, 2.231311559677124, 2.3392086029052734, 1.8832886219024658, 1.7807163000106812, 1.7407970428466797, 1.706495761871338, 1.7477971315383911, 1.7535896301269531, 1.4742859601974487, 1.4617692232131958, 1.3223718404769897, 1.2702834606170654, 1.1827242374420166, 1.222302794456482, 1.1702382564544678, 1.208017110824585, 1.2201859951019287, 1.3078014850616455, 1.3755359649658203, 1.3661035299301147, 3.6612277030944824, 3.6239964962005615, 3.5493030548095703, 3.5173254013061523, 3.5060782432556152, 3.4286346435546875, 3.420837879180908, 9.575759887695312, 9.589080810546875, 9.587662696838379, 7.685234069824219, 3.952409267425537, 3.501835584640503, 1.310699701309204, 1.3651970624923706, 1.3824362754821777, 1.4028207063674927, 1.448439359664917, 1.3837052583694458, 1.2776228189468384, 1.2552134990692139, 1.1489118337631226, 0.8306459188461304, 0.8446314930915833, 0.8333559632301331, 0.7836567759513855, 0.7929940819740295, 1.0503066778182983, 1.0039070844650269, 1.0475047826766968, 0.8872166275978088, 0.887163519859314, 0.8378776907920837, 0.8712493777275085, 0.9433449506759644, 0.9485231041908264, 1.0108379125595093, 1.0451292991638184, 1.0820233821868896, 1.0506610870361328, 1.0710816383361816, 1.1295092105865479, 1.1530838012695312, 1.1292513608932495, 1.1261893510818481, 1.1736711263656616, 1.2456140518188477]
# detection_angle_rad = 2.3550000190734863*2
# detection_angle = detection_angle_rad * 180 / math.pi
# # print(min(regions))
# # print(len(regions))
# # print(detection_angle)

# scanned_regions = {
#     'right': 0,
#     'front_right': 0,
#     'front': 0,
#     'front_left': 0,
#     'left': 0,
# }

# def callback_laserscan(msg):
#     scanned_regions['right'] = min(min(msg[0:19]), 10)
#     scanned_regions['front_right'] = min(min(msg[20:39]), 10)
#     scanned_regions['front'] = min(min(msg[40:59]), 10)
#     scanned_regions['front_left'] = min(min(msg[60:79]), 10)
#     scanned_regions['left'] = min(min(msg[80:99]), 10)

# def avoid_obstacle(scanned_regions):
    
#     # regions = scanned_regions
#     speed = 0
#     steering_angle = 0

#     state_description = ""
#     print(f'Scanned regions: {scanned_regions}')

# callback_laserscan(msg)
# avoid_obstacle(scanned_regions)

def normalize_angle(angle):
    if(math.fabs(angle) > math.pi):
        angle = angle - (2 * math.pi * angle) / (math.fabs(angle))
    return angle

print(normalize_angle(5))
